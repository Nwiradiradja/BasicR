df <- data.frame(char_vec,marks)
###########################################################
## Task One: R Overview & Preliminaries
## In this task, you will learn about the R programming
## language and write basic R commands.
###########################################################
# Nathaniel Wiradiradja
### Basic R Commands
### 1.1: Assignments in R
## Assign x to 1, y to 2 and z to 3
x = 1
y = 2
z = 3
# OR
x <- 1
y <- 2
z <- 3
# OR
1 -> x
2 -> y
3 -> z
### 1.2: Functions
## Print Hello World
print("Hello World")
### 1.3: Computations
## Add 17 to 5
17 + 5
## Add 5 to x
5 + x
## Add 15 to 5 and store it in a variable called y
y = 15 + 5
# OR y <- 15 + 5
## Find the square root of 16 and store it in a variable called y
y <- sqrt(16)      #Square root function
## Find the square root of 16
sqrt(16)
## Calling variable in R
y # RUN IT JUST PRINTS THE CONTENTS
x
# Call y, see y value in console
y
# Call x, see x value in console
x
###########################################################
## Task Two: Basic Data Types in R
## In this task, you will understand the different data types
## in R, and how they are used in R.
###########################################################
### 2.1: Variable Assignment
## Set the variable x to 6 (Numeric Type)
x <- 6
## Set the variable y to "Hello" (Character Type)
w <- "Hello"
## Note: R is case sensitive: The variables 'z' and 'Z' can coexist
## in R environment and have different values.
# Store z to the character 'World'
z <- "World"
# Store the value in a variable Z
Z <- 8
### 2.2: Call Variables
# Call small z
print(z)
# Call capital Z
print(Z)
### 2.3: Adding Object Together
a <- x + Z
b <- x + y
## 2.4: What do you think will be the result of this?
c <- w + z
matrix3[-3,-3]
df <- data.frame(char_vec,marks)
class(df)     ## Look at data frame's overall type
###########################################################
## Task One: R Overview & Preliminaries
## In this task, you will learn about the R programming
## language and write basic R commands.
###########################################################
# Nathaniel Wiradiradja
### Basic R Commands
### 1.1: Assignments in R
## Assign x to 1, y to 2 and z to 3
x = 1
y = 2
z = 3
# OR
x <- 1
y <- 2
z <- 3
# OR
1 -> x
2 -> y
3 -> z
### 1.2: Functions
## Print Hello World
print("Hello World")
### 1.3: Computations
## Add 17 to 5
17 + 5
## Add 5 to x
5 + x
## Add 15 to 5 and store it in a variable called y
y = 15 + 5
# OR y <- 15 + 5
## Find the square root of 16 and store it in a variable called y
y <- sqrt(16)      #Square root function
## Find the square root of 16
sqrt(16)
## Calling variable in R
y # RUN IT JUST PRINTS THE CONTENTS
x
# Call y, see y value in console
y
# Call x, see x value in console
x
###########################################################
## Task Two: Basic Data Types in R
## In this task, you will understand the different data types
## in R, and how they are used in R.
###########################################################
### 2.1: Variable Assignment
## Set the variable x to 6 (Numeric Type)
x <- 6
## Set the variable y to "Hello" (Character Type)
w <- "Hello"
## Note: R is case sensitive: The variables 'z' and 'Z' can coexist
## in R environment and have different values.
# Store z to the character 'World'
z <- "World"
# Store the value in a variable Z
Z <- 8
### 2.2: Call Variables
# Call small z
print(z)
# Call capital Z
print(Z)
### 2.3: Adding Object Together
a <- x + Z
b <- x + y
## 2.4: What do you think will be the result of this?
c <- w + z
## 2.10: Store movie ratings in a variable called fac
fac <- factor(c("3star", "4star", "5star", "2star" ))
## 3.1: Create a vector of the marks of 4 students
## use c() to store several values in one variable
marks <- c(14, 26, 28, 30)
char_vec <- c("a", "b", "c", "d")
# 4.1: Create matrix with values from marks, 2 rows and 2 columns
matrix1 <- matrix(marks, nrow = 2, ncol = 2)
matrix2 <- matrix(marks, nrow = 2, ncol = 2, byrow = TRUE)
matrix3 <- matrix(int, nrow = 3, ncol = 3)
# 4.3: Create vector with 9 integers from 1 to 9
int <- 1:9
matrix3 <- matrix(int, nrow = 3, ncol = 3)
df <- data.frame(char_vec,marks)
class(df)     ## Look at data frame's overall type
load("C:/Users/Nate/Desktop/R_Intro_Project/.RData")
source("C:/Users/Nate/Desktop/R_Intro_Project/Getting_Started_with_R.R", echo=TRUE)
source("C:/Users/Nate/Desktop/R_Intro_Project/Getting_Started_with_R.R", echo=TRUE)
## 2.5: Check the data type of the variable a
class(a)
## 2.6: Set a variable num to 8.5
num <- 8.5
## 2.7: Change numeric data type to integer
int <- as.integer(num)
## 2.8: Create a character variable from a numeric variable
char <- "12345"
log <- TRUE
## 2.10: Store movie ratings in a variable called fac
fac <- factor(c("3star", "4star", "5star", "2star" ))
## 3.1: Create a vector of the marks of 4 students
## use c() to store several values in one variable
marks <- c(14, 26, 28, 30)
char_vec <- c("a", "b", "c", "d")
## 3.8: Create the variable char_num_vec to take numeric and character types
char_num_vec <- c(10,20,30,"a")
seq(1,14, by=2)
# 4.1: Create matrix with values from marks, 2 rows and 2 columns
matrix1 <- matrix(marks, nrow = 2, ncol = 2)
matrix2 <- matrix(marks, nrow = 2, ncol = 2, byrow = TRUE)
# 4.3: Create vector with 9 integers from 1 to 9
int <- 1:9
matrix3 <- matrix(int, nrow = 3, ncol = 3)
load("C:/Users/Nate/Desktop/R_Intro_Project/.RData")
load("C:/Users/Nate/Desktop/R_Intro_Project/.RData")
str(df)
## 3.8: Create the variable char_num_vec to take numeric and character types
char_num_vec <- c(10,20,30,"a")
str(df)
# 5.3: Look at columns' data types
class(df$marks)
# 5.4: Call a column in a data frame
df$marks
# OR
df[,1]
# OR
df[ ,1]
# 5.5: Create sub data frame with first 3 rows only
df1 <- df[1:3,]
## 3.9 (Ex.) : What do you think will be the data type of the vector?
class(char_num_vec) #Character value overides number value
df <- data.frame(char_vec,marks)
class(df)     ## Look at data frame's overall type
str(df)
df1
data <- data.frame(
Name = c("Olayinka", "Ayomikun", "Juliet"),
Age = c(24, 21, 19),
Height = c(1.67, 1.60, 1.66),
Salary = c(25000, 12000, 10000)
)
data1 <- data.frame(
Name = c("Daniel", "Yusuf"),
Age = c(23, 26),
Height = c(1.68, 1.69),
Salary = c(35000, 37000)
)
data <- data.frame(
Name = c("Olayinka", "Ayomikun", "Juliet"),
Age = c(24, 21, 19),
Height = c(1.67, 1.60, 1.66),
Salary = c(25000, 12000, 10000)
)
## Call the data frame
print(data)
class(data)  ## Check the data type
nrow(data)  # This returns the number of rows in the data frame
ncol(data)  # This returns the number of columns in the data frame
data1 <- data.frame(
Name = c("Daniel", "Yusuf"),
Age = c(23, 26),
Height = c(1.68, 1.69),
Salary = c(35000, 37000)
)
df2 <- rbbind(data,data1)
df2 <- rbind(data,data1)
df2
## Create two new columns; Gender and LastName
Gender = c("M", "F", "F", "M", "M")
LastName = c("Arimoro", "Isijola", "James", "Akinbote", "Khalid")
## cbind - A column bind appends new values in column fashion
df3 <- cbind(df2, Gender, LastName)
df3
## Check the dataframe and its structure
str(df3)
list <- list(char_vec, marks, matrix1, df)
list
list[[1]]
list[[2]]
# (Ex.): Access the third and fourth objects
list[[3]]
list[[4]]
list[[3]][1,]
# 7.1: Install package on computer (from CRAN repository)
install.packages("readr")
library(readr)
# load package in R session
library(readr)
install.packages("readxl")
library(readxl)
## Load in Rsession to use read_excel() fucntion
library(readxl)
setwd("C:\Users\Nate\Desktop\R_Intro_Project")
setwd("C:/Users/Nate/Desktop/R_Intro_Project")
getwd()
txtdata <- read.table("dataset.txt", header = TRUE)
class(txtdata)
View(txtdata)
View(txtdata)
## See all data
# ** You can click on txtdata in the Environemtn tab -->>
View(txtdata)
## See first 5 rows
head(txtdata)
## See first 5 rows
head(txtdata, 5)
## See last rows
tail(txtdata, 2)
## Check the structure of the data
str(txtdata)
## Check the summary of the data
summary(txtdata)
txtdata$sales <- as.character(txtdata$Sales)
## Check the structure of the data
str(txtdata)
orange <- read.table("Orange_comma_separated.txt", header = TRUE, sep = ",")
View(Orange)
## Check the summary of the data
summary(orange)
str(orange)
orange%Tree <- as.factor(orange$Tree)
orange$Tree <- as.factor(orange$Tree)
str(orange)
diabetes <- read.csv("diabetes.csv")
## (Ex.) Check the data type
class(diabetes)
head(diabetes, 5)
str(diabetes)
## (Ex.) Check the summary of the data
summary(diabetes)
## (Ex.) Check the number of rows and columns
nrow(diabetes)
ncol(diabetes)
exdata <- read_excel("dataset.xlsx")
## Check the data type
class(exdata)
# Make the data a proper data frame object
exdata <- as.data.frame(exdata)
class(exdata)
